"use strict";(self.webpackChunkmy_documents=self.webpackChunkmy_documents||[]).push([[5694],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=l(t),d=o,f=g["".concat(c,".").concat(d)]||g[d]||u[d]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=g;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3157:(e,n,t)=>{t.r(n),t.d(n,{Highlight:()=>p,assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={sidebar_position:1},i="Spring \u6d41\u7a0b\u56fe MDX",s={unversionedId:"Spring-Code/Spring\u542f\u52a8\u6d41\u7a0b1",id:"Spring-Code/Spring\u542f\u52a8\u6d41\u7a0b1",title:"Spring \u6d41\u7a0b\u56fe MDX",description:"Refresh()",source:"@site/docs/Spring-Code/Spring\u542f\u52a8\u6d41\u7a0b1.mdx",sourceDirName:"Spring-Code",slug:"/Spring-Code/Spring\u542f\u52a8\u6d41\u7a0b1",permalink:"/my-documents/docs/Spring-Code/Spring\u542f\u52a8\u6d41\u7a0b1",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Spring-Code/Spring\u542f\u52a8\u6d41\u7a0b1.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Spring \u6d41\u7a0b\u56fe",permalink:"/my-documents/docs/Spring-Code/Spring\u542f\u52a8\u6d41\u7a0b"},next:{title:"Tutorial Intro",permalink:"/my-documents/docs/intro"}},c={},l=[{value:"Refresh()",id:"refresh",level:2}],p=e=>{let{children:n,color:t}=e;return(0,o.kt)("span",{style:{backgroundColor:t,borderRadius:"20px",color:"#fff",padding:"10px",cursor:"pointer"},onClick:()=>{alert("You clicked the color "+t+" with label "+n)}},n)},u={toc:l,Highlight:p};function g(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"spring-\u6d41\u7a0b\u56fe-mdx"},"Spring \u6d41\u7a0b\u56fe MDX"),(0,o.kt)("h2",{id:"refresh"},"Refresh()"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"\u8fd9\u91cc\u662fSpring\u542f\u52a8\u7684\u6d41\u7a0b")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public void refresh() throws BeansException, IllegalStateException {\n        synchronized (this.startupShutdownMonitor) {\n            // Prepare this context for refreshing.\n\n            /**\n             * \u51c6\u5907\u5de5\u4f5c\uff1a\n             * \u8bbe\u7f6e\u542f\u52a8\u65f6\u95f4\u3001\u662f\u5426\u6fc0\u6d3b\u6807\u8bc6\u4f4d\n             * \u521d\u59cb\u5316\u5c5e\u6027\u6e90\uff08property source\uff09\u914d\u7f6e\n             */\n            prepareRefresh();\n\n            // Tell the subclass to refresh the internal bean factory.\n            /**\n             * \u544a\u8bc9\u5b50\u7c7b\u5237\u65b0\u5185\u90e8bean\u5de5\u5382\n             * \u62ff\u5230DefaultListableBeanFactory,\u4f9b\u540e\u9762\u65b9\u6cd5\u8c03\u7528\n             */\n            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n            // Prepare the bean factory for use in this context.\n            /**\n             * \u51c6\u5907bean\u5de5\u5382\n             */\n            prepareBeanFactory(beanFactory);\n\n            try {\n                // Allows post-processing of the bean factory in context subclasses.\n                /**\n                 * \u8fd9\u4e2a\u65b9\u6cd5\u5728\u5f53\u524d\u7248\u672c\u6ca1\u6709\u5b9e\u73b0\n                 * \u53ef\u80fd\u5728spring\u540e\u9762\u7684\u7248\u672c\u4f1a\u53bb\u6269\u5c55\n                 */\n                postProcessBeanFactory(beanFactory);\n\n                // Invoke factory processors registered as beans in the context.\n                /**\n                 * \u5728\u4e0a\u4e0b\u6587\u4e2d\u8c03\u7528\u6ce8\u518c\u4e3abean\u7684\u5de5\u5382\u5904\u7406\u5668\n                 *\n                 * \u6dfb\u52a0BeanPostProcessor\n                 * \u5982\u679c\u53d1\u73b0loadTimeWeaver\u7684Bean\n                 */\n                invokeBeanFactoryPostProcessors(beanFactory);\n\n                // Register bean processors that intercept bean creation.\n                /**\n                 * \u6ce8\u518cBeanPostProcessor\n                 * \u81ea\u5b9a\u4e49\u4ee5\u53caspring\u5185\u90e8\u7684\n                 */\n                registerBeanPostProcessors(beanFactory);\n\n                // Initialize message source for this context.\n                /**\n                 * \u56fd\u9645\u5316\u652f\u6301\uff0c\u4e0d\u5173\u5fc3\n                 */\n                initMessageSource();\n\n                // Initialize event multicaster for this context.\n                /**\n                 * \u521d\u59cb\u5316\u4e8b\u4ef6\u76d1\u542c\u591a\u8def\u5e7f\u64ad\u5668\n                 */\n                initApplicationEventMulticaster();\n\n                // Initialize other special beans in specific context subclasses.\n                /**\n                 * \u8fd9\u4e2a\u65b9\u6cd5\u5728\u5f53\u524d\u7248\u672c\u6ca1\u6709\u5b9e\u73b0\n                 * \u53ef\u80fd\u5728spring\u540e\u9762\u7684\u7248\u672c\u4f1a\u53bb\u6269\u5c55\n                 */\n                onRefresh();\n\n                // Check for listener beans and register them.\n                /**\n                 * \u6ce8\u518c\u76d1\u542c\u5668\n                 */\n                registerListeners();\n\n                // Instantiate all remaining (non-lazy-init) singletons.\n                /**\n                 * \u5b9e\u4f8b\u5316\u6240\u6709bean\n                 */\n                finishBeanFactoryInitialization(beanFactory);\n\n                // Last step: publish corresponding event.\n                finishRefresh();\n            }\n\n            catch (BeansException ex) {\n                if (logger.isWarnEnabled()) {\n                    logger.warn("Exception encountered during context initialization - " +\n                            "cancelling refresh attempt: " + ex);\n                }\n\n                // Destroy already created singletons to avoid dangling resources.\n                destroyBeans();\n\n                // Reset \'active\' flag.\n                cancelRefresh(ex);\n\n                // Propagate exception to caller.\n                throw ex;\n            }\n            finally {\n                // Reset common introspection caches in Spring\'s core, since we\n                // might not ever need metadata for singleton beans anymore...\n                resetCommonCaches();\n                <Highlight color="#25c2a0">resetCommonCaches();</Highlight>\n            }\n        }\n    }\n\n')),(0,o.kt)("p",null,"This is ",(0,o.kt)(p,{color:"#25c2a0",mdxType:"Highlight"},"Docusaurus green")," !"))}g.isMDXComponent=!0}}]);